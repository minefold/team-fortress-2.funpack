#!/usr/bin/env ruby
$:.unshift File.expand_path('../../lib', __FILE__)

require 'bundler/setup'
require 'time'
require 'json'
require 'open3'
require 'log_processor'
require 'brock'
require 'settings'
require 'bash'

# ---

STDOUT.sync = true

# usage: ./run

data_file = ENV['DATAFILE']
shared_dir = ENV['SHARED_DIR']
root = File.expand_path('../..', __FILE__)
working = `pwd`.strip

data = JSON.parse(File.read(data_file), symbolize_names: true)
# TODO: remove after next pinky deploy
data = data[:settings][:settings] ? data[:settings] : data

server_id = `uuidgen`.strip
default_cfg = "#{shared_dir}/tf2/tf/cfg/server.cfg"

include Bash

# Metamod:source
# all servers share 1 copy of Metamod:source
bash %Q{
  rsync -a #{root}/mm/ #{shared_dir}/tf2/tf
  rsync #{root}/templates/metamod.vdf #{shared_dir}/tf2/tf/addons
}

# sourcemod
# each server has it's own copy of sourcemod
bash %Q{
  cp -R #{root}/sm #{working}
}

bash %Q{
  rsync -a #{root}/maps/ #{shared_dir}/tf2/tf/maps
}

schema = JSON.parse(File.read("#{root}/funpack.json"))['schema']

s = Settings.new(schema,
  data[:settings].merge(
    server_id: server_id,
    hostname: data[:name],
    pinion_uid: 'lindenstmadness'
  )
)
{
  "server.cfg.erb" => 'server.cfg',
  'sourcemod.vdf.erb' => 'sourcemod.vdf',
  'pinion_adverts.cfg.erb' => 'pinion_adverts.cfg',
  'admins.cfg.erb' => 'sm/addons/sourcemod/configs/admins.cfg',
}.each do |src, dest|
  File.write(dest, s.erb(File.read("#{root}/templates/#{src}")))
end

# symlinks
bash %Q{
  ln -s #{working}/server.cfg #{shared_dir}/tf2/tf/cfg/#{server_id}-server.cfg

  mkdir -p #{shared_dir}/tf2/tf/addons/#{server_id}-metamod
  ln -s #{working}/sourcemod.vdf #{shared_dir}/tf2/tf/addons/#{server_id}-metamod/sourcemod.vdf
  cp -R #{working}/sm/addons/sourcemod #{shared_dir}/tf2/tf/addons/#{server_id}-metamod/sourcemod

  # cp #{root}/pinion/pinion_adverts.smx #{working}/sm/addons/sourcemod/plugins/pinion_adverts.smx
  # rm -f #{shared_dir}/tf2/tf/cfg/sourcemod/pinion_adverts.cfg
  # ln -s #{working}/pinion_adverts.cfg #{shared_dir}/tf2/tf/cfg/sourcemod/pinion_adverts.cfg
}

# debugging
File.open('server.log', 'w+') do |log_file|
  log_file.sync = true

  Dir.chdir("#{shared_dir}/tf2") do
    Open3.popen3( "unbuffer", "-p",
                  "./srcds_run",
                  "-verify_all",
                  "-usercon",
                  "-game", "tf",
                  "-nobreakpad",
                  "-pingboost", "2",
                  "-ip", "0.0.0.0:#{ENV['PORT']}",
                  "-port", ENV['PORT'],
                  "+map", s.map,
                  "+maxplayers", s.f('max-players').to_s,
                  "+fps_max", "300",
                  "+servercfgfile", "#{server_id}-server.cfg",
                  "+mm_basedir", "addons/#{server_id}-metamod",
                  "+sm_basepath", "addons/#{server_id}-metamod/sourcemod"
                ) do |stdin, stdout, stderr, wait_thr|
      processor = LogProcessor.new

      begin
        Thread.new do
          while true
            input = $stdin.readline.strip
            case input
            when 'list'
              stdin.puts("status")
            when /^kick (.*)$/
              stdin.puts("kickid #{$1}")
            when 'stop'
              Process.kill :TERM, wait_thr.pid
            else
              stdin.puts(input)
            end
          end
        end

        Thread.new do
          while true
            sleep 60
            stdin.puts 'stats'
          end
        end

        while true
          line = stdout.readline.strip

          # debugging
          log_file.puts(line)

          # ignore commands we write to stdin
          next if ['', 'status', 'stop', 'stats'].include?(line)

          events = processor.process_line(line)
          events = [events] unless events.kind_of?(Array)
          events.each do |event|
            if event
              if %w(player_connected player_disconnected).include?(event[:event]) and event[:uid].nil?
                stdin.puts 'status'
                event = nil
              end

              puts JSON.dump(event) if event
            end
          end
        end
      rescue EOFError
      end
      exit_status = wait_thr.value
    end
  end
end

bash %Q{
  rm -rf #{shared_dir}/tf2/tf/addons/#{server_id}-metamod
  rm -f #{shared_dir}/tf2/tf/cfg/#{server_id}-server.cfg
  rm -f #{shared_dir}/tf2/tf/addons/metamod-#{server_id}
}