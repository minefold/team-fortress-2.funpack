#!/usr/bin/env ruby
$:.unshift File.expand_path('../../lib', __FILE__)

require 'bundler/setup'
require 'time'
require 'json'
require 'open3'
require 'log_processor'
require 'brock'
require 'settings'
require 'bash'

# ---

STDOUT.sync = true
$stdin.sync = true

# usage: ./run <config>

config_path = ARGV.shift
build_dir = ENV['BUILD_DIR']
root = File.expand_path('../..', __FILE__)
working = `pwd`.strip

config = JSON.parse(File.read(config_path), symbolize_names: true)

server_id = `uuidgen`.strip
default_cfg = "#{build_dir}/orangebox/tf/cfg/server.cfg"

include Bash

bash %Q{
  rm -f #{default_cfg}
  echo "440" > #{build_dir}/orangebox/steam_appid.txt
}

# Metamod:source
# all servers share 1 copy of Metamod:source
bash %Q{
  cp -R #{root}/mm/* #{build_dir}/orangebox/tf
  cp #{root}/templates/metamod.vdf #{build_dir}/orangebox/tf/addons
}

# sourcemod
# each server has it's own copy of sourcemod
bash %Q{
  cp -R #{root}/sm #{working}
}

defs = JSON.parse(File.read("#{root}/funpack.json"))['settings']

s = Settings.new(defs, config[:settings].merge(server_id: server_id))
{
  "server.cfg.erb" => 'server.cfg',
  'sourcemod.vdf.erb' => 'sourcemod.vdf',
  'admins.cfg.erb' => 'sm/addons/sourcemod/configs/admins.cfg',
}.each do |src, dest|
  File.write(dest, s.erb(File.read("#{root}/templates/#{src}")))
end

# symlinks
bash %Q{
  ln -s #{working}/sm/addons/sourcemod #{build_dir}/orangebox/tf/addons/#{server_id}-sourcemod
  ln -s #{working}/server.cfg #{build_dir}/orangebox/tf/cfg/#{server_id}-server.cfg
  ln -s #{working}/sourcemod.vdf #{build_dir}/orangebox/tf/addons/metamod/#{server_id}-sourcemod.vdf
}

# debugging
File.open('server.log', 'w+') do |log_file|
  log_file.sync = true

  Dir.chdir("#{build_dir}/orangebox") do
    Open3.popen3(
            "unbuffer", "-p",
            "./srcds_run",
            "-autoupdate",
            "-verify_all",
            "-console",
            "-usercon",
            "-secure",
            "-game", "tf",
            "-nobrakepad",
            "-pingboost", "2",
            "+sv_lan", "0",
            "+hostport", config['port'].to_s,
            "+map", `cat #{build_dir}/orangebox/tf/mapcycle.txt | sort -R | head -n1`.strip,
            "+maxplayers", "24",
            "+fps_max", "300",
            "+servercfgfile", "#{server_id}-server.cfg",
            "+sm_basepath", "addons/#{server_id}-sourcemod",
          ) do |stdin, stdout, stderr, wait_thr|

      processor = LogProcessor.new

      begin
        Thread.new do
          while true
            input = $stdin.readline.strip
            case input
            when 'list'
              stdin.puts("status")
            when /^kick (.*)$/
              stdin.puts("kickid #{$1}")
            when 'stop'
              Process.kill :TERM, wait_thr.pid
            else
              stdin.puts(input)
            end
          end
        end

        while true
          line = stdout.readline

          # debugging
          log_file.puts(line)

          events = processor.process_line(line)
          events = [events] unless events.kind_of?(Array)
          events.each do |event|
            if event
              if %w(player_connected player_disconnected).include?(event[:event]) and event[:uid].nil?
                stdin.puts 'status'
                event = nil
              end

              puts JSON.dump(event) if event
            end
          end
        end
      rescue EOFError
      end
      exit_status = wait_thr.value
    end
  end
end

bash %Q{
  rm -f #{build_dir}/orangebox/tf/addons/#{server_id}-sourcemod
  rm -f #{build_dir}/orangebox/tf/cfg/#{server_id}-server.cfg
  rm -f #{build_dir}/orangebox/tf/addons/metamod/#{server_id}-sourcemod.vdf
}